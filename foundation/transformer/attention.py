# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/transformer/07a_transformer.attention.ipynb.

# %% auto 0
__all__ = ['A', 'PrepareForMultiHeadAttention', 'MultiHeadAttention', 'ScaleDotProductAttention']

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 4
import math

import torch
from torch import nn
import torch.nn.functional as F
from fastcore.foundation import docs

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 7
@docs
class A:
    def __init__(self):
        pass
    _docs = dict(cls_doc="")

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 10
@docs
class PrepareForMultiHeadAttention(nn.Module):
    def __init__(self, d_model, heads, d_k, bias):
        super().__init__()
        self.linear = nn.Linear(d_model, heads * d_k, bias=bias)
        self.heads = heads
        self.d_k = d_k

    def forward(self, x):
        head_shape = x.shape[:-1]
        
        x = self.linear(x)
        x = x.view(*head_shape, self.heads, self.d_k)
        
        return x
    
    _docs = dict(cls_doc="",
                 forward="yyy")

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 15
def _calculate_attention(q, k, v, mask=None):
    d_k = k.shape[-1]

    score = (q @ k.T) / math.sqrt(d_k)
        
    score = F.softmax(score, dim=-1)
    attention_score = score @ v
    
    return attention_score

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 66
class MultiHeadAttention(nn.Module):
    def __init__(self, d_model: int = 4, num_heads: int = 2, dropout: float = 0.3):
        super().__init__()

        # d_q, d_k, d_v
        self.d_h: int = d_model // num_heads


        self.d_model = d_model
        self.num_heads = num_heads

        self.dropout = nn.Dropout(dropout)

        ##create a list of layers for K, and a list of layers for V
        self.linear_Qs = nn.ModuleList([nn.Linear(d_model, self.d_h)
                                        for _ in range(num_heads)])
        self.linear_Ks = nn.ModuleList([nn.Linear(d_model, self.d_h)
                                        for _ in range(num_heads)])
        self.linear_Vs = nn.ModuleList([nn.Linear(d_model, self.d_h)
                                        for _ in range(num_heads)])

        self.mha_linear = nn.Linear(d_model, d_model)

    def scaled_dot_product_attention(self, Q: torch.Tensor, K: torch.Tensor, V: torch.Tensor, mask=None):
        # shape(Q) = [B x seq_len x D/num_heads]
        # shape(K, V) = [B x seq_len x D/num_heads]

        Q_K_matmul = torch.matmul(Q, K.permute(0, 2, 1))
        scores = Q_K_matmul/math.sqrt(self.d_h)
        # shape(scores) = [B x seq_len x seq_len]
        
        if mask is not None:
            scores = scores.masked_fill(mask == 0, -1e9)

        attention_weights = F.softmax(scores, dim=-1)
        # shape(attention_weights) = [B x seq_len x seq_len]

        output = torch.matmul(attention_weights, V)
        # shape(output) = [B x seq_len x D/num_heads]

        return output, attention_weights

    def forward(self, pre_q, pre_k, pre_v, mask=None):
        # shape(x) = [B x seq_len x D]

        Q = [linear_Q(pre_q) for linear_Q in self.linear_Qs]
        K = [linear_K(pre_k) for linear_K in self.linear_Ks]
        V = [linear_V(pre_v) for linear_V in self.linear_Vs]
        # shape(Q, K, V) = [B x seq_len x D/num_heads] * num_heads

        output_per_head = []
        attn_weights_per_head = []
        # shape(output_per_head) = [B x seq_len x D/num_heads] * num_heads
        # shape(attn_weights_per_head) = [B x seq_len x seq_len] * num_heads
        
        for Q_, K_, V_ in zip(Q, K, V):
            
            ##run scaled_dot_product_attention
            output, attn_weight = self.scaled_dot_product_attention(Q_, K_, V_, mask)
            # shape(output) = [B x seq_len x D/num_heads]
            # shape(attn_weights_per_head) = [B x seq_len x seq_len]
            output_per_head.append(output)
            attn_weights_per_head.append(attn_weight)

        output = torch.cat(output_per_head, -1)
        attn_weights = torch.stack(attn_weights_per_head).permute(1, 0, 2, 3)
        # shape(output) = [B x seq_len x D]
        # shape(attn_weights) = [B x num_heads x seq_len x seq_len]
        
        projection = self.dropout(self.mha_linear(output))

        return projection, attn_weights

# %% ../../nbs/transformer/07a_transformer.attention.ipynb 67
class ScaleDotProductAttention(nn.Module):
    def __init__(self):
        super().__init__()
        self.softmax = nn.Softmax(dim=-1)
    
    def forward(self, q, k, v, mask=None):
        
        batch_size, head, n_words, d_head = k.size()
